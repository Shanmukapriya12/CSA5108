#include <stdio.h>
#include <math.h>

int gcd(int a, int b) {
    while(b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Compute (base^exp) % mod using modular exponentiation
long long mod_pow(long long base, int exp, int mod) {
    long long result = 1;
    base %= mod;
    while(exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    int p = 3, q = 11;
    int n = p * q;            // n = 33
    int phi = (p - 1) * (q - 1); // phi = 20

    int e;
    // Choose e such that 1 < e < phi and gcd(e, phi) = 1
    for (e = 2; e < phi; e++) {
        if (gcd(e, phi) == 1)
            break;
    }

    // Compute d such that (d * e) % phi = 1 (modular inverse)
    int d;
    for (d = 1; d < phi; d++) {
        if ((d * e) % phi == 1)
            break;
    }

    int msg = 9;  // Plaintext message
    long long encrypted = mod_pow(msg, e, n);
    long long decrypted = mod_pow(encrypted, d, n);

    printf("Original Message = %d\n", msg);
    printf("Encrypted Message = %lld\n", encrypted);
    printf("Decrypted Message = %lld\n", decrypted);

    return 0;
}
