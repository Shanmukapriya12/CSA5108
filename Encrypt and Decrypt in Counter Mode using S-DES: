#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8  // 8 bits for S-DES blocks

// S-DES Substitution boxes (S-boxes) for S-DES encryption
int S0[4][4] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 3, 2}
};

int S1[4][4] = {
    {0, 1, 2, 3},
    {2, 0, 1, 3},
    {3, 0, 1, 2},
    {2, 1, 0, 3}
};

// Function to perform permutation P10
void P10(int key[10], int output[10]) {
    int perm[10] = {2, 4, 1, 6, 3, 9, 0, 8, 7, 5};
    for (int i = 0; i < 10; i++) {
        output[i] = key[perm[i]];
    }
}

// Function to perform permutation P4
void P4(int input[8], int output[4]) {
    int perm[4] = {1, 3, 2, 0};
    for (int i = 0; i < 4; i++) {
        output[i] = input[perm[i]];
    }
}

// Function to perform S-box substitution
int* SBox(int input[4], int sbox[4][4]) {
    int row = (input[0] << 1) | input[3];  // First and last bit
    int col = (input[1] << 1) | input[2];  // Second and third bit
    int* output = (int*)malloc(2 * sizeof(int));
    output[0] = (sbox[row][col] >> 1) & 1;
    output[1] = sbox[row][col] & 1;
    return output;
}

// Function to generate the keys K1 and K2
void generate_keys(int key[10], int K1[8], int K2[8]) {
    int P10_key[10];
    P10(key, P10_key);
    
    // Split P10 key into two halves
    int left[5], right[5];
    for (int i = 0; i < 5; i++) {
        left[i] = P10_key[i];
        right[i] = P10_key[i + 5];
    }

    // Left shifts for K1
    for (int i = 0; i < 1; i++) {
        int temp_left = left[0], temp_right = right[0];
        for (int j = 0; j < 4; j++) {
            left[j] = left[j + 1];
            right[j] = right[j + 1];
        }
        left[4] = temp_left;
        right[4] = temp_right;
    }

    // Merge left and right after shifting
    int merged[10];
    for (int i = 0; i < 5; i++) {
        merged[i] = left[i];
        merged[i + 5] = right[i];
    }

    P4(merged, K1);

    // Now do another left shift for K2
    for (int i = 0; i < 2; i++) {
        int temp_left = left[0], temp_right = right[0];
        for (int j = 0; j < 4; j++) {
            left[j] = left[j + 1];
            right[j] = right[j + 1];
        }
        left[4] = temp_left;
        right[4] = temp_right;
    }

    // Merge left and right again
    for (int i = 0; i < 5; i++) {
        merged[i] = left[i];
        merged[i + 5] = right[i];
    }

    P4(merged, K2);
}

// Function to perform F function in S-DES
void F(int input[8], int key[8], int output[8]) {
    int left[4], right[4], temp[4];
    for (int i = 0; i < 4; i++) {
        left[i] = input[i];
        right[i] = input[i + 4];
    }

    int temp_out[4];
    int *S_out = SBox(right, S1);
    for (int i = 0; i < 4; i++) {
        temp_out[i] = S_out[i];
    }
    P4(temp_out, output);
}

void encrypt(int plaintext[8], int key[10], int ciphertext[8]) {
    int K1[8], K2[8];
    generate_keys(key, K1, K2);

    // Initial permutation (IP)
    int perm_input[8];
    for (int i = 0; i < 8; i++) {
        perm_input[i] = plaintext[i];
    }

    // After Initial permutation
    int left[4], right[4];
    for (int i = 0; i < 4; i++) {
        left[i] = perm_input[i];
        right[i] = perm_input[i + 4];
    }

    // Round 1 with K1
    F(perm_input, K1, ciphertext);
    for (int i = 0; i < 8; i++) {
        perm_input[i] = ciphertext[i];
    }

    // Round 2 with K2
    F(perm_input, K2, ciphertext);
    memcpy(plaintext, ciphertext, 8);
}

void decrypt(int ciphertext[8], int key[10], int plaintext[8]) {
    int K1[8], K2[8];
    generate_keys(key, K1, K2);
    int K1_temp[8];
    memcpy(K1_temp, K2, 8);
    memcpy(K2, K1, 8);
    memcpy(K1, K1_temp, 8);
    encrypt(ciphertext, key, plaintext);
}

// XOR operation for Counter Mode
void xor_blocks(int *block1, int *block2, int *result, int length) {
    for (int i = 0; i < length; i++) {
        result[i] = block1[i] ^ block2[i];
    }
}

// Encrypt in Counter (CTR) Mode
void encrypt_ctr(int *plaintext, int *key, int *counter, int *ciphertext, int length) {
    int encrypted_counter[8];
    for (int i = 0; i < length; i += 8) {
        // Encrypt the counter
        encrypt(counter, key, encrypted_counter);

        // XOR the encrypted counter with the plaintext block
        xor_blocks(plaintext + i, encrypted_counter, ciphertext + i, 8);

        // Increment the counter (modulo 256)
        for (int j = 7; j >= 0; j--) {
            counter[j]++;
            if (counter[j] != 0) break;
        }
    }
}

// Decrypt in Counter (CTR) Mode
void decrypt_ctr(int *ciphertext, int *key, int *counter, int *plaintext, int length) {
    int encrypted_counter[8];
    for (int i = 0; i < length; i += 8) {
        // Encrypt the counter
        encrypt(counter, key, encrypted_counter);

        // XOR the encrypted counter with the ciphertext block
        xor_blocks(ciphertext + i, encrypted_counter, plaintext + i, 8);

        // Increment the counter (modulo 256)
        for (int j = 7; j >= 0; j--) {
            counter[j]++;
            if (counter[j] != 0) break;
        }
    }
}

int main() {
    int plaintext[32] = {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8};  // 32 bits of plaintext
    int key[10] = {0, 1, 1, 1, 1, 1, 1, 1, 1, 0}; // 10-bit key for S-DES
    int counter[8] = {0, 0, 0, 0, 0, 0, 0, 0}; // 8-bit counter starting at 00000000
    int ciphertext[32];
    int decrypted[32];

    printf("Original Plaintext: ");
    for (int i = 0; i < 32; i++) {
        printf("%d", plaintext[i]);
    }
    printf("\n");

    // Encrypt using CTR mode
    encrypt_ctr(plaintext, key, counter, ciphertext, 32);
    printf("Ciphertext: ");
    for (int i = 0; i < 32; i++) {
        printf("%d", ciphertext[i]);
    }
    printf("\n");

    // Decrypt using CTR mode
    decrypt_ctr(ciphertext, key, counter, decrypted, 32);
    printf("Decrypted Plaintext: ");
    for (int i = 0; i < 32; i++) {
        printf("%d", decrypted[i]);
    }
    printf("\n");

    return 0;
}
