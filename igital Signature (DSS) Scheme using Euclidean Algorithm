#include <stdio.h>
#include <stdlib.h>

// Extended Euclidean Algorithm to find modular inverse
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m; a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Modular exponentiation
int mod_exp(int base, int exp, int mod) {
    int result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    // Sample small prime parameters
    int p = 23;        // Large prime
    int q = 11;        // q divides (p-1)
    int g = 2;         // Generator g^q mod p == 1

    int x = 4;         // Private key (0 < x < q)
    int y = mod_exp(g, x, p); // Public key y = g^x mod p

    int k = 3;         // Random per-message secret (1 < k < q), gcd(k, q) = 1
    int h = 9;         // Message hash (for simplicity, a small int)

    int r = mod_exp(g, k, p) % q;
    int k_inv = mod_inverse(k, q);
    int s = (k_inv * (h + x * r)) % q;

    printf("Public key y: %d\n", y);
    printf("Signature: (r = %d, s = %d)\n", r, s);

    // Signature verification
    int w = mod_inverse(s, q);
    int u1 = (h * w) % q;
    int u2 = (r * w) % q;
    int v = ((mod_exp(g, u1, p) * mod_exp(y, u2, p)) % p) % q;

    if (v == r)
        printf("Signature is VALID.\n");
    else
        printf("Signature is INVALID.\n");

    return 0;
}
